pip install pandas scikit-learn matplotlib

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Load the dataset (replace 'house_prices.csv' with your actual dataset)
data = pd.read_csv('house_prices.csv')

# Assume the dataset has features like 'Size', 'Bedrooms', 'Age' and 'Price' is the target variable
# Adjust the feature names according to your dataset
X = data[['Size', 'Bedrooms', 'Age']]  # Features
y = data['Price']                       # Target

# Divide the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the multiple linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict house prices for the test set
predictions = model.predict(X_test)

# Plotting the actual vs predicted prices
plt.figure(figsize=(10, 6))
plt.scatter(y_test, predictions, color='blue', alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')  # Diagonal line
plt.title('Actual vs Predicted House Prices')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.grid()
plt.show()





crash.csv

Age,Speed,Fate
25,55,1
30,45,0
22,60,1
40,50,0
35,70,1
28,30,0
50,65,1
55,75,0
33,40,1
20,80,1

pip install pandas scikit-learn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the dataset
data = pd.read_csv('crash.csv')

# Features and target variable
X = data[['Age', 'Speed']]  # Features
y = data['Fate']  # Target: 1 (survived), 0 (not survived)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print('Confusion Matrix:')
print(conf_matrix)
print('Classification Report:')
print(class_report)

# Example prediction
new_passenger = [[30, 50]]  # Age and Speed of a new passenger
predicted_fate = model.predict(new_passenger)[0]
print(f'The predicted fate for the new passenger is: {"Survived" if predicted_fate == 1 else "Not Survived"}')