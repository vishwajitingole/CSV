pip install pandas scikit-learn matplotlib seaborn

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Load the dataset (replace 'fuel_consumption.csv' with your actual dataset)
data = pd.read_csv('fuel_consumption.csv')

# Assume the dataset has features like 'Engine Size', 'Cylinders', 'Weight' and 'Fuel Consumption' is the target variable
# Adjust the feature names according to your dataset
X = data[['Engine Size', 'Cylinders', 'Weight']]  # Features
y = data['Fuel Consumption']                        # Target

# Divide the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the multiple linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict fuel consumption for the test set
predictions = model.predict(X_test)

# Plotting the actual vs predicted fuel consumption for one feature (e.g., Engine Size)
plt.figure(figsisze=(10, 6))
plt.scatter(X_test['Engine Size'], y_test, color='blue', label='Actual', alpha=0.6)
plt.scatter(X_test['Engine Size'], predictions, color='red', label='Predicted', alpha=0.6)
plt.title('Actual vs Predicted Fuel Consumption')
plt.xlabel('Engine Size')
plt.ylabel('Fuel Consumption')
plt.legend()
plt.grid()
plt.show()




pip install pandas scikit-learn seaborn matplotlib

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Load the Iris dataset
iris = sns.load_dataset('iris')

# Features and target variable
X = iris.drop('species', axis=1)  # Features
y = iris['species']                # Target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the KNN model
k = 3  # You can change the value of k
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train, y_train)

# Make predictions
y_pred = knn.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Plotting the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues', 
            xticklabels=iris['species'].unique(), yticklabels=iris['species'].unique())
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()