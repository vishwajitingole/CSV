pip install numpy pandas matplotlib scikit-learn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error

# Load the dataset
data = pd.read_csv('Salary_positions.csv')

# Assuming the dataset has columns 'Level' and 'Salary'
X = data[['Level']]
y = data['Salary']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit Simple Linear Regression
simple_model = LinearRegression()
simple_model.fit(X_train, y_train)

# Make predictions with Simple Linear Regression
y_pred_simple = simple_model.predict(X_test)

# Fit Polynomial Linear Regression
degree = 2  # You can change the degree for higher polynomial regression
poly_features = PolynomialFeatures(degree=degree)
X_poly_train = poly_features.fit_transform(X_train)
X_poly_test = poly_features.transform(X_test)

poly_model = LinearRegression()
poly_model.fit(X_poly_train, y_train)

# Make predictions with Polynomial Linear Regression
y_pred_poly = poly_model.predict(X_poly_test)

# Calculate Mean Squared Error for both models
mse_simple = mean_squared_error(y_test, y_pred_simple)
mse_poly = mean_squared_error(y_test, y_pred_poly)

print(f'Mean Squared Error (Simple Linear Regression): {mse_simple}')
print(f'Mean Squared Error (Polynomial Linear Regression): {mse_poly}')

# Predict salaries for level 11 and level 12 employees
levels_to_predict = np.array([[11], [12]])
salary_pred_simple = simple_model.predict(levels_to_predict)
salary_pred_poly = poly_model.predict(poly_features.transform(levels_to_predict))

print(f'Predicted Salary for Level 11 (Simple): {salary_pred_simple[0]}')
print(f'Predicted Salary for Level 11 (Polynomial): {salary_pred_poly[0]}')
print(f'Predicted Salary for Level 12 (Simple): {salary_pred_simple[1]}')
print(f'Predicted Salary for Level 12 (Polynomial): {salary_pred_poly[1]}')

# Plotting the results
plt.scatter(X, y, color='blue', label='Actual Data')
plt.scatter(X_test, y_pred_simple, color='red', label='Simple Linear Predictions')
plt.scatter(X_test, y_pred_poly, color='green', label='Polynomial Predictions')
plt.title('Salary Prediction')
plt.xlabel('Level')
plt.ylabel('Salary')
plt.legend()
plt.show()