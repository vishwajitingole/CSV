pip install tensorflow

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Create a simple dataset
# For demonstration, let's create a binary classification dataset
X = np.random.rand(1000, 10)  # 1000 samples, 10 features
y = (np.sum(X, axis=1) > 5).astype(int)  # Binary target based on sum of features

# Create a two-layer neural network
model = Sequential()

# First layer with ReLU activation
model.add(Dense(64, input_dim=10, activation='relu'))  # 64 neurons, input dimension is 10

# Second layer with Sigmoid activation
model.add(Dense(1, activation='sigmoid'))  # Output layer for binary classification

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Summarize the model
model.summary()

# Optionally, you can train the model
# model.fit(X, y, epochs=10, batch_size=32)




pip install pandas scikit-learn matplotlib

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the Boston housing dataset
boston = load_boston()
X = pd.DataFrame(boston.data, columns=boston.feature_names)
y = pd.Series(boston.target)

# For Simple Linear Regression, we will use only one feature. Let's use 'RM' (average number of rooms per dwelling).
X_simple = X[['RM']]

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_simple, y, test_size=0.2, random_state=42)

# Create a Linear Regression model
model = LinearRegression()

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R^2 Score: {r2:.2f}")

# Plotting the results
plt.scatter(X_test, y_test, color='blue', label='Actual Prices')
plt.scatter(X_test, y_pred, color='red', label='Predicted Prices')
plt.plot(X_test, y_pred, color='green', linewidth=2, label='Regression Line')
plt.title('Simple Linear Regression: RM vs Price')
plt.xlabel('Average Number of Rooms (RM)')
plt.ylabel('House Price')
plt.legend()
plt.show()