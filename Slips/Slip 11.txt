pip install numpy pandas matplotlib scikit-learn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load the Boston Housing dataset
boston = load_boston()
X = pd.DataFrame(boston.data, columns=boston.feature_names)
y = boston.target

# For simplicity, let's use only one feature (e.g., RM - average number of rooms)
X = X[['RM']]

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create polynomial features
degree = 2  # You can change the degree for higher polynomial regression
poly_features = PolynomialFeatures(degree=degree)
X_poly_train = poly_features.fit_transform(X_train)
X_poly_test = poly_features.transform(X_test)

# Fit the polynomial regression model
model = LinearRegression()
model.fit(X_poly_train, y_train)

# Make predictions
y_pred = model.predict(X_poly_test)

# Calculate and print the mean squared error
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Plotting the results
plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.scatter(X_test, y_pred, color='red', label='Predicted')
plt.title('Polynomial Regression on Boston Housing Dataset')
plt.xlabel('Average Number of Rooms (RM)')
plt.ylabel('House Price')
plt.legend()
plt.show()




pip install pandas scikit-learn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset from the UCI repository
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00267/banknote_authentication.csv"
data = pd.read_csv(url, header=None)

# Display the first few rows of the dataset
print(data.head())

# The dataset has 5 columns: 
# 0: variance of Wavelet Transformed image
# 1: skewness of Wavelet Transformed image
# 2: curtosis of Wavelet Transformed image
# 3: entropy of image
# 4: class (0 for genuine, 1 for forged)

# Separate features and target variable
X = data.iloc[:, :-1]  # Features (all columns except the last)
y = data.iloc[:, -1]    # Target variable (last column)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Decision Tree classifier
model = DecisionTreeClassifier()

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Example of predicting a new banknote specimen
# Replace these values with actual feature values for prediction
new_banknote = [[-2.5, 1.5, 0.5, -0.5]]  # Example feature values
predicted_class = model.predict(new_banknote)
print(f'Predicted class for the new banknote specimen: {"Genuine" if predicted_class[0] == 0 else "Forged"}')