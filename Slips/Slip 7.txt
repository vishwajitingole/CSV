pip install pandas scikit-learn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Load the data
data = pd.read_csv('Salary_positions.csv')

# Assuming the CSV has columns 'Level' and 'Salary'
X = data[['Level']]  # Features (independent variable)
y = data['Salary']   # Target (dependent variable)

# Split the data into training and testing sets (optional)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Fit the model to the training data
model.fit(X_train, y_train)

# Predict salaries for level 11 and level 12 employees
levels_to_predict = pd.DataFrame({'Level': [11, 12]})
predicted_salaries = model.predict(levels_to_predict)

# Output the predictions
for level, salary in zip(levels_to_predict['Level'], predicted_salaries):
    print(f'Predicted salary for level {level}: ${salary:.2f}')



pip install pandas scikit-learn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
data = pd.read_csv('weather_forecast.csv')

# Display the first few rows of the dataset
print(data.head())

# Assuming the dataset has features and a target column 'Play'
# Convert categorical variables to numerical using one-hot encoding
data = pd.get_dummies(data, drop_first=True)

# Separate features and target variable
X = data.drop('Play', axis=1)  # Features
y = data['Play']                # Target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Naive Bayes classifier
model = GaussianNB()

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print('Classification Report:')
print(classification_report(y_test, y_pred))